 $FreeBSD$

; System call name/number master file
; Processed to created v7_proto.h, v7_sysent.c, v7_systrace_args.c,
; v7_syscalls.c and v7_syscall.h.

; Columns: number audit type nargs name alt{name,tag,rtyp}/comments
;	number	system call number, must be in order
;	audit	the audit event associated with the system call
;		A value of AUE_NULL means no auditing, but it also means that
;		there is no audit event for the call at this time. For the
;		case where the event exists, but we don't want auditing, the
;		event should be #defined to AUE_NULL in audit_kevents.h.
;	type	one of STD, OBSOL, UNIMPL, COMPAT
;	name	pseudo-prototype of syscall routine
;		If one of the following alts is different, then all appear:
;	altname	name of system call if different
;	alttag	name of args struct tag if different from [o]`name'"_args"
;	altrtyp	return type if not int (bogus - syscalls always return int)
;		for UNIMPL/OBSOL, name continues with comments

; types:
;	STD	always included
;	COMPAT	included on COMPAT #ifdef
;	OBSOL	obsolete, not included in system, only specifies name
;	UNIMPL	not implemented, placeholder only

#include <sys/param.h>
#include <sys/sysent.h>
#include <sys/sysproto.h>
#include <compat/v7/v7_types.h>
#include <compat/v7/v7_signal.h>
#include <compat/v7/v7_proto.h>

; #ifdef's, etc. may be included, and are copied to the output files.

0	AUE_NULL	STD	{ int v7_nosys(void); }
1	AUE_EXIT	STD	{ void v7_exit(v7_int rval); }
2	AUE_FORK	STD	{ int v7_fork(void); }
3	AUE_NULL	STD	{ int v7_read(int fd, char *buf, \
				    u_int nbytes); }
4	AUE_NULL	STD	{ int v7_write(int fd, char *buf, \
				    u_int nbytes); }
5	AUE_OPEN_RWTC	STD	{ int v7_open(char *path, int flags, \
				    int mode); }
6	AUE_CLOSE	STD	{ int v7_close(int fd); }
7	AUE_WAIT4	STD	{ int v7_wait(int a1, int a2, int a3); }
8	AUE_CREAT	STD	{ int v7_creat(char *path, int mode); }
9	AUE_LINK	STD	{ int v7_link(char *path, char *link); }
10	AUE_UNLINK	STD	{ int v7_unlink(char *path); }
11	AUE_EXECVE	STD	{ int v7_execv(char *path, char **argp); }
12	AUE_CHDIR	STD	{ int v7_chdir(char *path); }
13	AUE_NULL	STD	{ int v7_time(v7_time_t *tp); }
14	AUE_MKNOD	STD	{ int v7_mknod(char* path, int mode, \
				    int dev); }
15	AUE_CHMOD	STD	{ int v7_chmod(char *path, int mode); }
16	AUE_CHOWN	STD	{ int v7_chown(char *path, int uid, \
				    int gid); }
17	AUE_NULL	STD	{ caddr_t v7_break(caddr_t nsize); }
18	AUE_STAT	STD	{ int v7_stat(char* path, \
				    struct v7_stat *st); }
19	AUE_LSEEK	STD	{ long v7_lseek(int fd, long offset, \
				    int whence); }
20	AUE_NULL	STD	{ pid_t v7_getpid(void); }
21	AUE_MOUNT	STD	{ int v7_mount(char *special, char *dir, \
				    int flags, int fstype, char *data, \
				    int len); }
22	AUE_UMOUNT	STD	{ int v7_umount(char *name); }
23	AUE_SETUID	STD	{ int v7_setuid(int uid); }
24	AUE_GETUID	STD	{ uid_t v7_getuid(void); }
25	AUE_SETTIMEOFDAY	STD	{ int v7_stime(long *timep); }
26	AUE_PTRACE	STD	{ int v7_ptrace(int req, pid_t pid, \
				    caddr_t addr, int data); }
27	AUE_NULL	STD	{ int v7_alarm(unsigned sec); }
28	AUE_FSTAT	STD	{ int v7_fstat(int fd, \
				    struct v7_stat *st); }
29	AUE_NULL	STD	{ int v7_pause(void); }
30	AUE_NULL	STD	{ int v7_utime(char *path, \
				    struct v7_utimbuf *buf); }
31	AUE_NULL	UNIMPL	v7_stty
32	AUE_NULL	UNIMPL	v7_gtty
33	AUE_ACCESS	STD	{ int v7_access(char *path, int amode); }
34	AUE_NICE	STD	{ int v7_nice(int incr); }
35	AUE_NULL	UNIMPL	v7_ftime
36	AUE_NULL	STD	{ int v7_sync(void); }
37	AUE_KILL	STD	{ int v7_kill(int pid, int signo); }
38	AUE_NULL	UNIMPL	v7_switch
39	AUE_NULL	UNIMPL	v7_setpgrp
40	AUE_NULL	UNIMPL	v7_tell
41	AUE_NULL	STD	{ int v7_dup(u_int fd); }
42	AUE_PIPE	STD	{ int v7_pipe(void); }
43	AUE_NULL	STD	{ int v7_times(struct tms *tp); }
44	AUE_PROFILE	STD	{ int v7_profil(caddr_t samples, u_int size, \
				    u_int offset, u_int scale); }
45	AUE_NULL	UNIMPL	v7_unused
46	AUE_SETGID	STD	{ int v7_setgid(int gid); }
47	AUE_GETGID	STD	{ gid_t v7_getgid(void); }
48	AUE_NULL	STD	{ int v7_sigsys(int sig, v7_sig_t fp); }
49	AUE_NULL	UNIMPL	v7_unused
50	AUE_NULL	UNIMPL	v7_unused
51	AUE_NULL	UNIMPL	v7_acct
52	AUE_NULL	UNIMPL	v7_sysphys
53	AUE_NULL	UNIMPL	v7_syslock
54	AUE_IOCTL	STD	{ int v7_ioctl(int fd, int cmd, \
				    caddr_t data); }
55	AUE_NULL	UNIMPL	v7_readwrite
56	AUE_NULL	UNIMPL	v7_mpxchan
57	AUE_NULL	UNIMPL	v7_reserved
58	AUE_NULL	UNIMPL	v7_reserved
59	AUE_EXECVE	STD	{ int v7_execve(char *path, char **argp, \
				    char **envp); }
60	AUE_UMASK	NOPROTO	{ int umask(int newmask); }
61	AUE_CHROOT	NOPROTO	{ int chroot(char *path); }
62	AUE_NULL	UNIMPL	v7_reserved
63	AUE_NULL	UNIMPL	v7_reserved
