/*
 * System call prototypes.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * $FreeBSD$
 */

#ifndef _V7_SYSPROTO_H_
#define	_V7_SYSPROTO_H_

#include <sys/signal.h>
#include <sys/acl.h>
#include <sys/cpuset.h>
#include <sys/domainset.h>
#include <sys/_ffcounter.h>
#include <sys/_semaphore.h>
#include <sys/ucontext.h>
#include <sys/wait.h>

#include <bsm/audit_kevents.h>

struct proc;

struct thread;

#define	PAD_(t)	(sizeof(register_t) <= sizeof(t) ? \
		0 : sizeof(register_t) - sizeof(t))

#if BYTE_ORDER == LITTLE_ENDIAN
#define	PADL_(t)	0
#define	PADR_(t)	PAD_(t)
#else
#define	PADL_(t)	PAD_(t)
#define	PADR_(t)	0
#endif

struct v7_nosys_args {
	register_t dummy;
};
struct v7_exit_args {
	char rval_l_[PADL_(int)]; int rval; char rval_r_[PADR_(int)];
};
struct v7_fork_args {
	register_t dummy;
};
struct v7_read_args {
	char fd_l_[PADL_(int)]; int fd; char fd_r_[PADR_(int)];
	char buf_l_[PADL_(char *)]; char * buf; char buf_r_[PADR_(char *)];
	char nbytes_l_[PADL_(u_int)]; u_int nbytes; char nbytes_r_[PADR_(u_int)];
};
struct v7_write_args {
	char fd_l_[PADL_(int)]; int fd; char fd_r_[PADR_(int)];
	char buf_l_[PADL_(char *)]; char * buf; char buf_r_[PADR_(char *)];
	char nbytes_l_[PADL_(u_int)]; u_int nbytes; char nbytes_r_[PADR_(u_int)];
};
struct v7_open_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char flags_l_[PADL_(int)]; int flags; char flags_r_[PADR_(int)];
	char mode_l_[PADL_(int)]; int mode; char mode_r_[PADR_(int)];
};
struct v7_close_args {
	char fd_l_[PADL_(int)]; int fd; char fd_r_[PADR_(int)];
};
struct v7_wait_args {
	char a1_l_[PADL_(int)]; int a1; char a1_r_[PADR_(int)];
	char a2_l_[PADL_(int)]; int a2; char a2_r_[PADR_(int)];
	char a3_l_[PADL_(int)]; int a3; char a3_r_[PADR_(int)];
};
struct v7_creat_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char mode_l_[PADL_(int)]; int mode; char mode_r_[PADR_(int)];
};
struct v7_link_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char link_l_[PADL_(char *)]; char * link; char link_r_[PADR_(char *)];
};
struct v7_unlink_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
};
struct v7_execv_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char argp_l_[PADL_(char **)]; char ** argp; char argp_r_[PADR_(char **)];
};
struct v7_chdir_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
};
struct v7_time_args {
	char tp_l_[PADL_(v7_time_t *)]; v7_time_t * tp; char tp_r_[PADR_(v7_time_t *)];
};
struct v7_mknod_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char mode_l_[PADL_(int)]; int mode; char mode_r_[PADR_(int)];
	char dev_l_[PADL_(int)]; int dev; char dev_r_[PADR_(int)];
};
struct v7_chmod_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char mode_l_[PADL_(int)]; int mode; char mode_r_[PADR_(int)];
};
struct v7_chown_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char uid_l_[PADL_(int)]; int uid; char uid_r_[PADR_(int)];
	char gid_l_[PADL_(int)]; int gid; char gid_r_[PADR_(int)];
};
struct v7_break_args {
	char nsize_l_[PADL_(caddr_t)]; caddr_t nsize; char nsize_r_[PADR_(caddr_t)];
};
struct v7_stat_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char st_l_[PADL_(struct v7_stat *)]; struct v7_stat * st; char st_r_[PADR_(struct v7_stat *)];
};
struct v7_lseek_args {
	char fd_l_[PADL_(int)]; int fd; char fd_r_[PADR_(int)];
	char offset_l_[PADL_(long)]; long offset; char offset_r_[PADR_(long)];
	char whence_l_[PADL_(int)]; int whence; char whence_r_[PADR_(int)];
};
struct v7_getpid_args {
	register_t dummy;
};
struct v7_mount_args {
	char special_l_[PADL_(char *)]; char * special; char special_r_[PADR_(char *)];
	char dir_l_[PADL_(char *)]; char * dir; char dir_r_[PADR_(char *)];
	char flags_l_[PADL_(int)]; int flags; char flags_r_[PADR_(int)];
	char fstype_l_[PADL_(int)]; int fstype; char fstype_r_[PADR_(int)];
	char data_l_[PADL_(char *)]; char * data; char data_r_[PADR_(char *)];
	char len_l_[PADL_(int)]; int len; char len_r_[PADR_(int)];
};
struct v7_umount_args {
	char name_l_[PADL_(char *)]; char * name; char name_r_[PADR_(char *)];
};
struct v7_setuid_args {
	char uid_l_[PADL_(int)]; int uid; char uid_r_[PADR_(int)];
};
struct v7_getuid_args {
	register_t dummy;
};
struct v7_stime_args {
	char timep_l_[PADL_(long *)]; long * timep; char timep_r_[PADR_(long *)];
};
struct v7_ptrace_args {
	char req_l_[PADL_(int)]; int req; char req_r_[PADR_(int)];
	char pid_l_[PADL_(pid_t)]; pid_t pid; char pid_r_[PADR_(pid_t)];
	char addr_l_[PADL_(caddr_t)]; caddr_t addr; char addr_r_[PADR_(caddr_t)];
	char data_l_[PADL_(int)]; int data; char data_r_[PADR_(int)];
};
struct v7_alarm_args {
	char sec_l_[PADL_(unsigned)]; unsigned sec; char sec_r_[PADR_(unsigned)];
};
struct v7_fstat_args {
	char fd_l_[PADL_(int)]; int fd; char fd_r_[PADR_(int)];
	char st_l_[PADL_(struct v7_stat *)]; struct v7_stat * st; char st_r_[PADR_(struct v7_stat *)];
};
struct v7_pause_args {
	register_t dummy;
};
struct v7_utime_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char buf_l_[PADL_(struct v7_utimbuf *)]; struct v7_utimbuf * buf; char buf_r_[PADR_(struct v7_utimbuf *)];
};
struct v7_access_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char amode_l_[PADL_(int)]; int amode; char amode_r_[PADR_(int)];
};
struct v7_nice_args {
	char incr_l_[PADL_(int)]; int incr; char incr_r_[PADR_(int)];
};
struct v7_sync_args {
	register_t dummy;
};
struct v7_kill_args {
	char pid_l_[PADL_(int)]; int pid; char pid_r_[PADR_(int)];
	char signo_l_[PADL_(int)]; int signo; char signo_r_[PADR_(int)];
};
struct v7_dup_args {
	char fd_l_[PADL_(u_int)]; u_int fd; char fd_r_[PADR_(u_int)];
};
struct v7_pipe_args {
	register_t dummy;
};
struct v7_times_args {
	char tp_l_[PADL_(struct tms *)]; struct tms * tp; char tp_r_[PADR_(struct tms *)];
};
struct v7_profil_args {
	char samples_l_[PADL_(caddr_t)]; caddr_t samples; char samples_r_[PADR_(caddr_t)];
	char size_l_[PADL_(u_int)]; u_int size; char size_r_[PADR_(u_int)];
	char offset_l_[PADL_(u_int)]; u_int offset; char offset_r_[PADR_(u_int)];
	char scale_l_[PADL_(u_int)]; u_int scale; char scale_r_[PADR_(u_int)];
};
struct v7_setgid_args {
	char gid_l_[PADL_(int)]; int gid; char gid_r_[PADR_(int)];
};
struct v7_getgid_args {
	register_t dummy;
};
struct v7_sigsys_args {
	char sig_l_[PADL_(int)]; int sig; char sig_r_[PADR_(int)];
	char fp_l_[PADL_(v7_sig_t)]; v7_sig_t fp; char fp_r_[PADR_(v7_sig_t)];
};
struct v7_ioctl_args {
	char fd_l_[PADL_(int)]; int fd; char fd_r_[PADR_(int)];
	char cmd_l_[PADL_(int)]; int cmd; char cmd_r_[PADR_(int)];
	char data_l_[PADL_(caddr_t)]; caddr_t data; char data_r_[PADR_(caddr_t)];
};
struct v7_execve_args {
	char path_l_[PADL_(char *)]; char * path; char path_r_[PADR_(char *)];
	char argp_l_[PADL_(char **)]; char ** argp; char argp_r_[PADR_(char **)];
	char envp_l_[PADL_(char **)]; char ** envp; char envp_r_[PADR_(char **)];
};
int	sys_v7_nosys(struct thread *, struct v7_nosys_args *);
int	sys_v7_exit(struct thread *, struct v7_exit_args *);
int	sys_v7_fork(struct thread *, struct v7_fork_args *);
int	sys_v7_read(struct thread *, struct v7_read_args *);
int	sys_v7_write(struct thread *, struct v7_write_args *);
int	sys_v7_open(struct thread *, struct v7_open_args *);
int	sys_v7_close(struct thread *, struct v7_close_args *);
int	sys_v7_wait(struct thread *, struct v7_wait_args *);
int	sys_v7_creat(struct thread *, struct v7_creat_args *);
int	sys_v7_link(struct thread *, struct v7_link_args *);
int	sys_v7_unlink(struct thread *, struct v7_unlink_args *);
int	sys_v7_execv(struct thread *, struct v7_execv_args *);
int	sys_v7_chdir(struct thread *, struct v7_chdir_args *);
int	sys_v7_time(struct thread *, struct v7_time_args *);
int	sys_v7_mknod(struct thread *, struct v7_mknod_args *);
int	sys_v7_chmod(struct thread *, struct v7_chmod_args *);
int	sys_v7_chown(struct thread *, struct v7_chown_args *);
int	sys_v7_break(struct thread *, struct v7_break_args *);
int	sys_v7_stat(struct thread *, struct v7_stat_args *);
int	sys_v7_lseek(struct thread *, struct v7_lseek_args *);
int	sys_v7_getpid(struct thread *, struct v7_getpid_args *);
int	sys_v7_mount(struct thread *, struct v7_mount_args *);
int	sys_v7_umount(struct thread *, struct v7_umount_args *);
int	sys_v7_setuid(struct thread *, struct v7_setuid_args *);
int	sys_v7_getuid(struct thread *, struct v7_getuid_args *);
int	sys_v7_stime(struct thread *, struct v7_stime_args *);
int	sys_v7_ptrace(struct thread *, struct v7_ptrace_args *);
int	sys_v7_alarm(struct thread *, struct v7_alarm_args *);
int	sys_v7_fstat(struct thread *, struct v7_fstat_args *);
int	sys_v7_pause(struct thread *, struct v7_pause_args *);
int	sys_v7_utime(struct thread *, struct v7_utime_args *);
int	sys_v7_access(struct thread *, struct v7_access_args *);
int	sys_v7_nice(struct thread *, struct v7_nice_args *);
int	sys_v7_sync(struct thread *, struct v7_sync_args *);
int	sys_v7_kill(struct thread *, struct v7_kill_args *);
int	sys_v7_dup(struct thread *, struct v7_dup_args *);
int	sys_v7_pipe(struct thread *, struct v7_pipe_args *);
int	sys_v7_times(struct thread *, struct v7_times_args *);
int	sys_v7_profil(struct thread *, struct v7_profil_args *);
int	sys_v7_setgid(struct thread *, struct v7_setgid_args *);
int	sys_v7_getgid(struct thread *, struct v7_getgid_args *);
int	sys_v7_sigsys(struct thread *, struct v7_sigsys_args *);
int	sys_v7_ioctl(struct thread *, struct v7_ioctl_args *);
int	sys_v7_execve(struct thread *, struct v7_execve_args *);

#ifdef COMPAT_43


#endif /* COMPAT_43 */


#ifdef COMPAT_FREEBSD4


#endif /* COMPAT_FREEBSD4 */


#ifdef COMPAT_FREEBSD6


#endif /* COMPAT_FREEBSD6 */


#ifdef COMPAT_FREEBSD7


#endif /* COMPAT_FREEBSD7 */


#ifdef COMPAT_FREEBSD10


#endif /* COMPAT_FREEBSD10 */


#ifdef COMPAT_FREEBSD11


#endif /* COMPAT_FREEBSD11 */

#define	V7_SYS_AUE_v7_nosys	AUE_NULL
#define	V7_SYS_AUE_v7_exit	AUE_EXIT
#define	V7_SYS_AUE_v7_fork	AUE_FORK
#define	V7_SYS_AUE_v7_read	AUE_NULL
#define	V7_SYS_AUE_v7_write	AUE_NULL
#define	V7_SYS_AUE_v7_open	AUE_OPEN_RWTC
#define	V7_SYS_AUE_v7_close	AUE_CLOSE
#define	V7_SYS_AUE_v7_wait	AUE_WAIT4
#define	V7_SYS_AUE_v7_creat	AUE_CREAT
#define	V7_SYS_AUE_v7_link	AUE_LINK
#define	V7_SYS_AUE_v7_unlink	AUE_UNLINK
#define	V7_SYS_AUE_v7_execv	AUE_EXECVE
#define	V7_SYS_AUE_v7_chdir	AUE_CHDIR
#define	V7_SYS_AUE_v7_time	AUE_NULL
#define	V7_SYS_AUE_v7_mknod	AUE_MKNOD
#define	V7_SYS_AUE_v7_chmod	AUE_CHMOD
#define	V7_SYS_AUE_v7_chown	AUE_CHOWN
#define	V7_SYS_AUE_v7_break	AUE_NULL
#define	V7_SYS_AUE_v7_stat	AUE_STAT
#define	V7_SYS_AUE_v7_lseek	AUE_LSEEK
#define	V7_SYS_AUE_v7_getpid	AUE_NULL
#define	V7_SYS_AUE_v7_mount	AUE_MOUNT
#define	V7_SYS_AUE_v7_umount	AUE_UMOUNT
#define	V7_SYS_AUE_v7_setuid	AUE_SETUID
#define	V7_SYS_AUE_v7_getuid	AUE_GETUID
#define	V7_SYS_AUE_v7_stime	AUE_SETTIMEOFDAY
#define	V7_SYS_AUE_v7_ptrace	AUE_PTRACE
#define	V7_SYS_AUE_v7_alarm	AUE_NULL
#define	V7_SYS_AUE_v7_fstat	AUE_FSTAT
#define	V7_SYS_AUE_v7_pause	AUE_NULL
#define	V7_SYS_AUE_v7_utime	AUE_NULL
#define	V7_SYS_AUE_v7_access	AUE_ACCESS
#define	V7_SYS_AUE_v7_nice	AUE_NICE
#define	V7_SYS_AUE_v7_sync	AUE_NULL
#define	V7_SYS_AUE_v7_kill	AUE_KILL
#define	V7_SYS_AUE_v7_dup	AUE_NULL
#define	V7_SYS_AUE_v7_pipe	AUE_PIPE
#define	V7_SYS_AUE_v7_times	AUE_NULL
#define	V7_SYS_AUE_v7_profil	AUE_PROFILE
#define	V7_SYS_AUE_v7_setgid	AUE_SETGID
#define	V7_SYS_AUE_v7_getgid	AUE_GETGID
#define	V7_SYS_AUE_v7_sigsys	AUE_NULL
#define	V7_SYS_AUE_v7_ioctl	AUE_IOCTL
#define	V7_SYS_AUE_v7_execve	AUE_EXECVE

#undef PAD_
#undef PADL_
#undef PADR_

#endif /* !_V7_SYSPROTO_H_ */
